#include <QCoreApplication>
#include <QDebug>
#include <QDir>
#include <QDateTime>

#include "Cipher.h"

namespace
{
	// Formats single line in mapping file
	const QString LINE_FORMATTER     = "[%1],%2[%3]\r\n";

	// Mapping file name
	const QString MAPPING_FILE_NAME  = "CentPatients.txt";

	// IEP directory name, used to validate specified directory
	const QString IEP_PATIENT_FOLDER = "IEP";

	// Used to format lines in mapping file
	const QString COLUMN_SPACE_FORMATER    = "                                    ";
}

// Creates mapping file in specified directory with specified name
int createMappingFile(const QString& mappingFileDirectory, const QStringList& directories, const QString& mappingFileName)
{
	QDir dir(mappingFileDirectory);
	if (dir.exists() && !directories.isEmpty())
	{
		QFile file(mappingFileDirectory + QDir::separator() + mappingFileName);
		if (! file.open(QIODevice::WriteOnly))
		{
			qWarning() << "Failed to create mapping file: " << file.fileName();
			return -1;
		}

		Cipher cipher;
		QTextStream out(&file);
		out << mappingFileName << " generated by Cent MappingTool, " << QDateTime::currentDateTime().toString();
		out << "\r\n" << "\r\n";

		QString space, decryptedDir;
		foreach (const QString& directory, directories)
		{
			space = COLUMN_SPACE_FORMATER;
			decryptedDir = cipher.decrypt(directory);
			space.chop(decryptedDir.length());

			out << LINE_FORMATTER.arg(decryptedDir).arg(space).arg(directory);
		}

		file.close();
	}
	else
	{
		return -2;
	}

	return 0;
}

bool isValidPatientDirectory(const QString& directory)
{
	QDir dir(directory);
	return dir.cd(IEP_PATIENT_FOLDER);
}

void patientDirectories(const QString& directoryToProcess, QStringList& directories)
{
	QDir dir(directoryToProcess);
	if (dir.exists())
	{
		QFileInfoList infoList= dir.entryInfoList(QDir::AllDirs | QDir::NoDotAndDotDot);
		foreach (const QFileInfo& info, infoList)
		{
			if (isValidPatientDirectory(info.absoluteFilePath()))
			{
				directories.append(info.fileName());
			}
		}
	}
	else
	{
		qWarning() << "Specified directory does not exists: " << directoryToProcess;
	}
}

int main(int argc, char* argv[])
{
	QCoreApplication app(argc, argv);
	QString directoryToProcess;

	if (2 <= argc)
	{
		// Take parameter as directory which has to be searched for patient folders
		directoryToProcess = argv[1];
	}
	else
	{
		// If there is no parameters take current application directory
		directoryToProcess = app.applicationDirPath();
	}

	qWarning() << "Patients directory: "<< directoryToProcess;

	// Get patient directories from specified folder
	QStringList directories;
	patientDirectories(directoryToProcess, directories);

	// Create mapping file
	return createMappingFile(app.applicationDirPath(), directories, MAPPING_FILE_NAME);
}
